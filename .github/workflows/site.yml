name: AI Blog Build and Deploy

on:
  # Scheduled runs (daily at 6 AM UTC)
  schedule:
    - cron: '0 6 * * *'
  
  # Manual trigger
  workflow_dispatch:
  
  # Push to main branch
  push:
    branches: [ main ]
  
  # Pull request to main
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Lint and Test
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run linting
      run: |
        flake8 content_pipeline/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 content_pipeline/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run type checking
      run: mypy content_pipeline/ --ignore-missing-imports
      
    - name: Run tests
      run: |
        pytest tests/ -v --cov=content_pipeline --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Generate Content and Build Site
  build:
    name: Generate Content and Build Site
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git operations
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Generate new content
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        FEED_SOURCES: ${{ secrets.FEED_SOURCES }}
      run: |
        python -m content_pipeline.generator
        
    - name: Generate cover images
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python -m content_pipeline.images
      continue-on-error: true  # Don't fail if image generation fails
      
    - name: Commit and push new content
      run: |
        git add content/
        git add content/images/
        if ! git diff --cached --quiet; then
          git commit -m "Add new AI-generated content - $(date '+%Y-%m-%d %H:%M')"
          git push
        else
          echo "No new content to commit"
        fi
      continue-on-error: true
      
    - name: Build site with Pelican
      run: |
        pelican content -s publishconf.py
        
    - name: Optimize build
      run: |
        # Install optimization tools
        npm install -g html-minifier-terser
        
        # Minify HTML files
        find output -name "*.html" -exec html-minifier-terser --input-dir output --output-dir output --file-ext html --collapse-whitespace --remove-comments --minify-css --minify-js {} \;
        
    - name: Generate lighthouse report
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
      continue-on-error: true
      
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.1
      with:
        publish-dir: './output'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - $(date '+%Y-%m-%d %H:%M')"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 5
      
    - name: Store build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: site-build-${{ github.sha }}
        path: output/
        retention-days: 30
        
    - name: Clean up old images
      run: |
        python -c "
        from content_pipeline.images import ImageGenerator
        gen = ImageGenerator('dummy')
        gen.cleanup_old_images(30)
        "
      continue-on-error: true

  # Performance monitoring
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Wait for deployment
      run: sleep 60  # Wait for Netlify deployment to complete
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://${{ secrets.NETLIFY_SITE_ID }}.netlify.app
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Check performance budgets
      run: |
        # This would check against performance budgets
        echo "Performance budget check completed"

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Send success notification
      if: needs.build.result == 'success'
      run: |
        echo "✅ AI Blog build and deployment successful!"
        # Add webhook notification here if needed
        
    - name: Send failure notification
      if: needs.build.result == 'failure'
      run: |
        echo "❌ AI Blog build failed!"
        # Add webhook notification here if needed 